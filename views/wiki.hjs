<!DOCTYPE HTML>
<html>
<head>
    <title>{{title}}</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    {{#isDev}}
    <link href="/css/dev/bootstrap.min.css" rel="stylesheet">
    <link href="/css/dev/bootstrap-responsive.min.css" rel="stylesheet">
    <link href="/css/dev/prettify.css" rel="stylesheet">
    <link href="/css/dev/docs.css" rel="stylesheet">
    <link href="/css/dev/treeview.css" rel="stylesheet">
    <link href="/css/dev/font-awesome.min.css" rel="stylesheet">
    {{/isDev}}
    {{^isDev}}
    <link href="/css/release/wikinext.min.css" rel="stylesheet">
    {{/isDev}}
    <!--[if IE 7]>
    <link rel="stylesheet" href="/css/font-awesome-ie7.min.css">
    <![endif]-->
    <style>
            /* Visualization styling */

        .node circle {
            cursor: pointer;
            fill: #fff;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        .node text {
            font-size: 11px;
        }

        path.link {
            fill: none;
            stroke: #ccc;
            stroke-width: 1.5px;
        }

    </style>
    {{#isDev}}
    <script type="text/javascript" src="/js/prettify.js"></script>
    <script type="text/javascript" src="/js/jquery.min.js"></script>
    <script type="text/javascript" src="/js/ICanHaz.min.js"></script>
    <script type="text/javascript" src="/js/jsdeferred.js"></script>
    <script type="text/javascript" src="/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="/js/underscore-min.js"></script>
    <script type="text/javascript" src="/js/wikinext.main.js"></script>
    <script type="text/javascript" src="/js/wikinext.helper.js"></script>
    <script type="text/javascript" src="/js/RDFa.min.1.1.0.js"></script>
    <script type="text/javascript" src="/js/d3.v3.min.js"></script>
    {{/isDev}}
    {{^isDev}}
    <script type="text/javascript" src="/js/release/wikinext.min.js"></script>
    {{/isDev}}
    {{#page}}
    {{#js}}
    <script type="text/javascript" src="/js/{{src}}"></script>
    {{/js}}
    {{/page}}
    <script>
    (function($) {
        RDF_TYPE = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
        RDF_PLAIN_LITERAL = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral';
        RDF_TYPED_LITERAL = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#TypedLiteral';
        RDF_XML_LITERAL = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral';
        RDF_OBJECT = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#object';

        window.wikinext = window.wikinext || {};
        var wikinext = window.wikinext;


        // known prefixes used to shorten IRIs during the TURTLE transformation
        wikinext.knownPrefixes = {
            // w3c
            'grddl': 'http://www.w3.org/2003/g/data-view#',
            'ma': 'http://www.w3.org/ns/ma-ont#',
            'owl': 'http://www.w3.org/2002/07/owl#',
            'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
            'rdfa': 'http://www.w3.org/ns/rdfa#',
            'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
            'rif': 'http://www.w3.org/2007/rif#',
            'skos': 'http://www.w3.org/2004/02/skos/core#',
            'skosxl': 'http://www.w3.org/2008/05/skos-xl#',
            'wdr': 'http://www.w3.org/2007/05/powder#',
            'void': 'http://rdfs.org/ns/void#',
            'wdrs': 'http://www.w3.org/2007/05/powder-s#',
            'xhv': 'http://www.w3.org/1999/xhtml/vocab#',
            'xml': 'http://www.w3.org/XML/1998/namespace',
            'xsd': 'http://www.w3.org/2001/XMLSchema#',
            // non-rec w3c
            'sd': 'http://www.w3.org/ns/sparql-service-description#',
            'org': 'http://www.w3.org/ns/org#',
            'gldp': 'http://www.w3.org/ns/people#',
            'cnt': 'http://www.w3.org/2008/content#',
            'dcat': 'http://www.w3.org/ns/dcat#',
            'earl': 'http://www.w3.org/ns/earl#',
            'ht': 'http://www.w3.org/2006/http#',
            'ptr': 'http://www.w3.org/2009/pointers#',
            // widely used
            'cc': 'http://creativecommons.org/ns#',
            'ctag': 'http://commontag.org/ns#',
            'dc': 'http://purl.org/dc/terms/',
            'dcterms': 'http://purl.org/dc/terms/',
            'foaf': 'http://xmlns.com/foaf/0.1/',
            'gr': 'http://purl.org/goodrelations/v1#',
            'ical': 'http://www.w3.org/2002/12/cal/icaltzd#',
            'og': 'http://ogp.me/ns#',
            'rev': 'http://purl.org/stuff/rev#',
            'sioc': 'http://rdfs.org/sioc/ns#',
            'v': 'http://rdf.data-vocabulary.org/#',
            'vcard': 'http://www.w3.org/2006/vcard/ns#',
            'schema': 'http://schema.org/'
        };

        /**
         * Used to initialize the UI, call once on document load.
         */
        wikinext.init = function() {

        };

        /**
         * Process the RDFa markup that has been input and display the output
         * in the active tab.
         */
        wikinext.process = function() {
            var preview = window.document;

            if(!preview.data)
            {
                GreenTurtle.attach(preview);
            }
            else
            {
                GreenTurtle.attach(preview, true);
            }

            var d3Nodes = wikinext.toD3TreeGraph(preview.data);

            wikinext.viz.redraw(d3Nodes);
        };

        /**
         * Attempts to retrieve the short name of an IRI based on the fragment
         * identifier or last item in the path.
         *
         * @param iri the IRI to process
         * @param hashify if true, pre-pend a hash character if the shortening results
         *                in a fragment identifier.
         * @returns a short name or the original IRI if a short name couldn't be
         *          generated.
         */
        wikinext.getIriShortName = function(iri, hashify) {
            var rval = iri;

            // find the last occurence of # or / - short name is everything after it
            if(iri.indexOf('#') >= 0) {
                if(hashify) {
                    rval = '#' + iri.split('#').pop();
                }
                else {
                    rval = iri.split('#').pop();
                }
            }
            else if(iri.indexOf('/') >= 0) {
                rval = iri.split('/').pop();
            }

            // don't allow the entire IRI to be optimized away
            if(rval.length < 1) {
                rval = iri;
            }

            return rval;
        };

        /**
         * Converts the RDFa data in the page to a D3 tree graph for visualization.
         *
         * @param data the reference to the RDFa DataDocument API.
         */
        wikinext.toD3TreeGraph = function(data) {
            var bnodeNames = {};
            var bnodeCount = 1;
            var rval = {
                'name': 'Web Page',
                'children': []
            };

            var subjects = data.getSubjects();
            var embedded = {};

            var createNode = function(s, p, data, rval) {
                var triples = data.getSubject(s);
                var predicates = triples === null ? [] : triples.predicates;
                var name = '';
                var node = {
                    'name': '',
                    'children': []
                };

                // calculate the short name of the node
                // prepend the predicate name if there is one
                if(p !== undefined) {
                    name = wikinext.getIriShortName(p) + ': ';
                }

                if(s.charAt(0) == '_') {
                    name += 'Item ' + bnodeNames[s];
                }
                else if(p == RDF_TYPE) {
                    name += wikinext.getIriShortName(s);
                }
                else {
                    name += wikinext.getIriShortName(s, true);
                }
                node.name = name;

                // create nodes for all predicates and objects
                for(p in predicates)
                {
                    // do not include which vocabulary was used in the visualization
                    if(p == "http://www.w3.org/ns/rdfa#usesVocabulary") {
                        continue;
                    }

                    var objects = triples.predicates[p].objects;
                    for(oi in objects) {
                        var value = '';
                        var o = objects[oi];

                        if(o.type == RDF_OBJECT) {
                            // recurse to create a node for the object if it's an object
                            createNode(o.value, p, data, node);
                            embedded[o.value] = true;
                        }
                        else {
                            // generate the leaf node
                            var name = '';
                            if(o.type == RDF_XML_LITERAL) {
                                // if the property is an XMLLiteral, serialise it
                                name = wikinext.nodelistToXMLLiteral(o.value);
                            }
                            else {
                                name = o.value;
                            }

                            var child = {
                                'name': wikinext.getIriShortName(p) + ': ' + name
                            };
                            node.children.push(child);
                        }
                    }
                }

                // remove the children property if there are no children
                if(node.children.length === 0) {
                    node.children = undefined;
                }
                // collapse children of nodes that have already been embedded
                if(embedded[s] !== undefined && node.children !== undefined) {
                    node._children = node.children;
                    node.children = undefined;
                }

                rval.children.push(node);
            };

            // Pre-generate names for all bnodes in the graph
            for(si in subjects) {
                var s = subjects[si];

                // calculate the short name of the node
                if(s.charAt(0) == '_' && !(s in bnodeNames)) {
                    bnodeNames[s] = bnodeCount;
                    bnodeCount += 1;
                }
            }

            // Generate the D3 tree graph
            for(si in subjects) {
                var s = subjects[si];
                createNode(s, undefined, data, rval);
            }

            // clean up any top-level children with no data
            var cleaned = [];
            for(c in rval.children)
            {
                var child = rval.children[c];
                if(child.children !== undefined)
                {
                    cleaned.push(child);
                }
            }
            rval.children = cleaned;

            return rval;
        };

        /**
         * Attempts to compress an IRI and updates a map of used prefixes if the
         * compression was successful.
         *
         * @param iri the IRI to compress into a Compact URI Expression.
         * @param prefixes the map of prefixes that have already been compressed.
         */
        wikinext.iriToCurie = function(iri, prefixes)
        {
            var rval = iri;
            var detectedPrefix = false;

            for(prefix in wikinext.knownPrefixes) {
                var expanded = wikinext.knownPrefixes[prefix];

                // if the IRI starts with a known CURIE prefix, compact it
                if(iri.indexOf(expanded) == 0) {
                    rval = prefix + ':' + iri.replace(expanded, '');
                    prefixes[prefix] = expanded;
                    break;
                }
            }

            if(rval.length == iri.length) {
                rval = '<' + iri + '>';
            }

            return rval;
        };

        /**
         * Converts a NodeList into an rdf:XMLLiteral string.
         *
         * @param nodelist the nodelist.
         */
        wikinext.nodelistToXMLLiteral = function(nodelist) {
            var str = '';
            for(var i = 0; i < nodelist.length; i++) {
                var n = nodelist[i];
                str += n.outerHTML || n.nodeValue;
            }
            return str;
        };

        /**
         * Converts the RDFa data in the page to a N-Triples representation.
         *
         * @param data the reference to the RDFa DataDocument API.
         */
        wikinext.toTurtleLite = function(data) {
            var rval = '';
            var subjects = data.getSubjects();
            for(si in subjects) {
                var s = subjects[si];
                var triples = data.getSubject(s);
                var predicates = triples.predicates;

                for(p in predicates)
                {
                    var objects = triples.predicates[p].objects;

                    for(oi in objects) {
                        var o = objects[oi];

                        // print the subject
                        if(s.charAt(0) == '_') {
                            rval += s + ' ';
                        }
                        else {
                            rval += '<' + s + '> ';
                        }

                        // print the predicate
                        rval += '<' + p + '> ';

                        //console.log(o);
                        // print the object
                        if(o.type == RDF_PLAIN_LITERAL) {
                            rval += '"' + o.value.replace('"', '\\"') + '"';
                            if(o.language != null) {
                                rval += '@' + o.language;
                            }
                        }
                        else if(o.type == RDF_OBJECT) {
                            if(o.value.charAt(0) == '_') {
                                rval += o.value;
                            }
                            else {
                                rval += '<' + o.value + '>';
                            }
                        }
                        else
                        {
                            rval += o.value;
                        }

                        rval += ' .\n';
                    }
                }
            }

            return rval;
        };

        /**
         * Converts the RDFa data in the page to a TURTLE representation of the data.
         *
         * @param data the reference to the RDFa DataDocument API.
         */
        wikinext.toTurtle = function(data) {
            var rval = '';
            var prefixesUsed = {};

            var subjects = data.getSubjects();
            for(var si in subjects) {
                var s = subjects[si];
                var triples = data.getSubject(s);
                var predicates = triples.predicates;

                // print the subject
                if(s.charAt(0) == '_') {
                    rval += s + ' ';
                }
                else {
                    rval += '<' + s + '>';
                }
                rval += '\n';

                var pList = [];
                for(p in predicates) { pList.push(p) }
                var lastP = pList.length - 1;

                for(pi in pList)
                {
                    var p = pList[pi];
                    var objects = triples.predicates[p].objects;
                    var lastO = objects.length - 1;

                    for(oi in objects) {
                        var o = objects[oi];

                        // print the predicate, as a CURIE if possible
                        rval += '   ' + wikinext.iriToCurie(p, prefixesUsed) + ' ';

                        //console.log(o);
                        // print the object
                        if(o.type == RDF_PLAIN_LITERAL) {
                            var lit = o.value.replace('"', '\\"');
                            var sep = '"';
                            if (lit.indexOf('\n') > -1) {
                                sep = '"""';
                            }
                            rval += sep + lit + sep;
                            if(o.language != null) {
                                rval += '@' + o.language;
                            }
                        }
                        else if(o.type == RDF_OBJECT) {
                            if(o.value.charAt(0) == '_') {
                                rval += o.value;
                            }
                            else {
                                rval += wikinext.iriToCurie(o.value, prefixesUsed);
                            }
                        }
                        else if(o.type == RDF_XML_LITERAL) {
                            rval += '"';
                            rval += wikinext.nodelistToXMLLiteral(o.value).replace('"', '\\"');
                            rval += '"^^rdf:XMLLiteral';
                        }
                        else if(o.type != null) {
                            rval += '"' + o.value.replace('"', '\\"') + '"' + '^^' +
                                    wikinext.iriToCurie(o.type, prefixesUsed);
                        }
                        else
                        {
                            console.log("UNCAUGHT TYPE", o);
                            rval += o.value;
                        }

                        // place the proper TURTLE statement terminator on the data
                        if (pi == lastP && oi == lastO) {
                            rval += ' .\n';
                        } else {
                            rval += ';\n';
                        }
                    }
                }
            }

            // prepend the prefixes used to the TURTLE representation.
            var prefixHeader = '';
            for(var prefix in prefixesUsed)
            {
                prefixHeader +=
                        '@prefix ' + prefix +': <' + prefixesUsed[prefix] + '> .\n';
            }
            rval = prefixHeader + '\n' + rval;

            return rval;
        };

        // setup the visualization viewport
        var m = [20, 120, 20, 120],
                w = 1024 - m[1] - m[3],
                h = 450 - m[0] - m[2],
                i = 0,
                root;

        var id = "wikinext_semantic_graph";

        wikinext.viz = {};
        var viz = wikinext.viz;
        /**
         * Redraw the graph visualization on the screen.
         */
        viz.redraw = function(nodes) {
            // delete any old SVG document
            $('#'+id).empty();

            // create a new tree layout
            viz.tree = d3.layout.tree()
                    .size([h, w])
                    .separation(function (a, b) {
                        var descendants = function(node) {
                            var count = 0;
                            for(d in node.children) {
                                count++;
                                count += descendants(node.children[d]);
                            }
                            return count;
                        };
                        var aDesc = Math.max(descendants(a), a.parent == b.parent ? 1 : 2);
                        var bDesc = Math.max(descendants(b), a.parent == b.parent ? 1 : 2);
                        return (aDesc + bDesc) / 2;
                    });

            // create the projection
            viz.diagonal = d3.svg.diagonal()
                    .projection(function(d) { return [d.y, d.x]; });

            // create the view for the graph
            viz.view = d3.select("#"+id).append("svg:svg")
                    .attr("width", w + m[1] + m[3])
                    .attr("height", h + m[0] + m[2])
                    .append("svg:g")
                    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

            // set the root value
            root = nodes;

            // if root is invalid, fix it
            if(root == undefined)
            {
                root = {'name': 'Web Page'};
            }

            // set the RDF data
            viz.tree.nodes(root);

            // set the root X and Y starting location? I don't really know what this does.
            root.x0 = h / 2;
            root.y0 = 0;

            // update the visualization
            viz.update(root);
        };

        viz.update = function(source) {
            var duration = d3.event && d3.event.altKey ? 5000 : 500;

            // Compute the new tree layout.
            var nodes = viz.tree.nodes(root).reverse();

            // Normalize for fixed-depth.
            nodes.forEach(function(d) { d.y = d.depth * 180; });

            // Update the nodes…
            var node = viz.view.selectAll("g.node")
                    .data(nodes, function(d) { return d.id || (d.id = ++i); });

            // Enter any new nodes at the parent's previous position.
            var nodeEnter = node.enter().append("svg:g")
                    .attr("class", "node")
                    .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
                    .on("click", function(d) { viz.toggle(d); viz.update(d); });

            nodeEnter.append("svg:circle")
                    .attr("r", 1e-6)
                    .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

            nodeEnter.append("svg:text")
                    .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
                    .attr("dy", ".35em")
                    .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
                    .text(function(d) { return d.name; })
                    .style("fill-opacity", 1e-6);

            // Transition nodes to their new position.
            var nodeUpdate = node.transition()
                    .duration(duration)
                    .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

            nodeUpdate.select("circle")
                    .attr("r", 4.5)
                    .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

            nodeUpdate.select("text")
                    .style("fill-opacity", 1);

            // Transition exiting nodes to the parent's new position.
            var nodeExit = node.exit().transition()
                    .duration(duration)
                    .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
                    .remove();

            nodeExit.select("circle")
                    .attr("r", 1e-6);

            nodeExit.select("text")
                    .style("fill-opacity", 1e-6);

            // Update the links…
            var link = viz.view.selectAll("path.link")
                    .data(viz.tree.links(nodes), function(d) { return d.target.id; });

            // Enter any new links at the parent's previous position.
            link.enter().insert("svg:path", "g")
                    .attr("class", "link")
                    .attr("d", function(d) {
                        var o = {x: source.x0, y: source.y0};
                        return viz.diagonal({source: o, target: o});
                    })
                    .transition()
                    .duration(duration)
                    .attr("d", viz.diagonal);

            // Transition links to their new position.
            link.transition()
                    .duration(duration)
                    .attr("d", viz.diagonal);

            // Transition exiting nodes to the parent's new position.
            link.exit().transition()
                    .duration(duration)
                    .attr("d", function(d) {
                        var o = {x: source.x, y: source.y};
                        return viz.diagonal({source: o, target: o});
                    })
                    .remove();

            // Stash the old positions for transition.
            nodes.forEach(function(d) {
                d.x0 = d.x;
                d.y0 = d.y;
            });
        };

        // Toggle children.
        viz.toggle = function(d) {
            if (d.children) {
                d._children = d.children;
                d.children = null;
            } else {
                d.children = d._children;
                d._children = null;
            }
        };

//        wikinext.init();
//        wikinext.process();
    })(jQuery);
    </script>
    <!--[if lt IE 9]><script src="/js/excanvas/excanvas.js"></script><![endif]-->
    <script type="text/javascript">
        var page = {
            _id: "{{#page}}{{_id}}{{/page}}"
        };
    </script>
    <script type="text/javascript">
            window.launch_wiki_script = (function(){
                var __data = {};
                var application = (function(){
                    {{#page}}
                    {{{app}}}
                    {{/page}}
                    return {
                        __construct: function() {
                            if (typeof construct == 'function'){
                                console.log('application construct');
                                __data = construct();
                            } else
                            if (typeof data != 'undefined')
                                __data = data;
                            if (typeof __data == 'undefined')
                                __data = {};
                            __data._id = "{{#page}}{{_id}}{{/page}}";
                            return __data;
                        },
                        __afterConstruct: function() {
                            if (typeof afterConstruct == 'function'){
                                console.log('application after construct');
                                afterConstruct();
                            }
                        }
                    }})();
                return {
                    construct: function(){
                        return application.__construct();
                    },
                    afterConstruct: function(){
                        application.__afterConstruct();
                    }
                };
            })();
        $(document).ready(function(){
            $("#show_attached_files").click(function() {
                if (!$(this).hasClass('active'))
                    $("#attached_files").show();
                else
                    $("#attached_files").hide();

            });
            $("#show_semantic_graph").click(function() {
                wikinext.process();
                if (!$(this).hasClass('active'))
                    $("#wikinext_semantic_graph").show();
                else
                    $("#wikinext_semantic_graph").hide();
            })
        });
                    //});
        document.wikinextReady = (function() {
            var data = launch_wiki_script.construct();
            var article = ich.article_template(data);
            var article_show = $("#article_show");
            article_show.empty();
            article_show.append(article);
            wikinextHelper.preparePrettify(article_show);
            launch_wiki_script.afterConstruct();
            wikinextHelper.updateContent();
            prettyPrint();
        });
    </script>
    <script type="text/html" id="article_template">
        {{#page}}
            {{{article}}}
        {{/page}}
    </script>
</head>
<body vocab="http://schema.org/" typeof="WebPage" about="{{#page}}/wiki/{{_id}}{{/page}}">
<div class="container-fluid">
<div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
        <div class="container-fluid">
            <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </a>
            <a class="brand" href="/">WikiNEXT</a>
            <div class="btn-group pull-right">
                {{#login}}
                <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
                    <i class="icon-user"></i> Login
                    <span class="caret"></span>
                </a>
                <ul class="dropdown-menu">
                    <li><a href="/auth/facebook">Facebook</a></li>
                </ul>
                {{/login}}
                {{#user}}
                <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
                    <i class="icon-user"></i> {{name}}
                    <span class="caret"></span>
                </a>
                <ul class="dropdown-menu">
                    <li><a href="#">Profile</a></li>
                    <li class="divider"></li>
                    <li><a href="/logout">Sign Out</a></li>
                </ul>
                {{/user}}

            </div>
            <div class="nav-collapse">
                <ul class="nav">
                    <li><a href="/"><i class="icon-home"></i>&nbsp;Home</a></li>
                    <li><a href="#" id="goto"><i class="icon-sitemap"></i>&nbsp;Go To Page</a></li>
                    {{#user}}
                    <li><a data-toggle="modal" href="#create-page-dialog"><i class="icon-file"></i>&nbsp;Create Page</a></li>
                    {{#page}}
                    <li><a href="/wiki/{{_id}}/edit"><i class="icon-edit"></i>&nbsp;Edit</a></li>
                    <li><a href="/wiki/{{_id}}/clone"><i class="icon-repeat"></i>&nbsp;Clone</a></li>
                    <li><a data-toggle="modal" href="#delete-page-dialog"><i class="icon-remove-sign"></i>&nbsp;Delete</a></li>
                    {{/page}}
                    {{/user}}
                    <li><a href="/wiki/5176580d1d20c5b055000001"><i class="icon-search"></i>&nbsp;Search</a></li>
                </ul>
            </div><!--/.nav-collapse -->
        </div>
    </div>
    <ul class="breadcrumb" property="breadcrumb">
        <li>
            <a href="/">Home</a> <span class="divider">/</span>
        </li>
        {{#page}}
        {{#nav}}
        <li>
            <a href="/wiki/{{_id}}">{{title}}</a> <span class="divider">/</span>
        </li>
        {{/nav}}
        {{/page}}
        {{#page}}
        <li class="active">{{title}}</li>
        {{/page}}
    </ul>
</div>
<br/><br/><br/>
<div class="container-fluid" typeof="Article" about="{{#page}}/wiki/{{_id}}{{/page}}">
    <div class="row-fluid">
    <div class="span3">
        <div class="well sidebar-nav">
            <ul class="nav nav-list">
                <li class="nav-header">Subpages</li>
                {{#pages}}
                <li><a href="/wiki/{{_id}}">{{title}}</a></li>
                {{/pages}}
            </ul>
        </div><!--/.well -->
    </div><!--/span-->
    <div class="span9">
        <span id="article_show" property="articleBody">
            {{#page}}
                {{{article}}}
            {{/page}}
        </span>
    </div><!--/row-->
    </div>
    <hr>

    <div class="row-fluid">

        <span class="btn" data-toggle="button" id="show_attached_files"><i class="icon-archive icon-large"></i>&nbsp;Attached Files</span>&nbsp;
        <span class="btn btn-success" data-toggle="button" id="show_semantic_graph"><i class="icon-eye-open icon-large"></i>&nbsp;Semantic Graph</span><br/><br/>
        <hr/>
            <span id="attached_files" style="display: none">
            {{#page}}
            {{#attach}}
            {{name}} : {{type}}
            <img src='/{{path}}/{{name}}'><br/>
            {{/attach}}
            {{/page}}
            </span>

        <div id="wikinext_semantic_graph" style="display: none"></div>
        <hr/>
    </div>
    <p>Tags:
        <a href="#"><span class="label label-info">no Tags</span></a>
        {{#page}}
        | <i class="icon-info-sign"></i><span property="name">{{title}}</span>
        | <i class="icon-user"></i>
        <span rel="author"><span typeOf="Person" about="/user/{{#author}}{{oid}}{{/author}}"><span property="name"><a href="/user/{{#author}}{{oid}}{{/author}}">{{created_by}}</a></span></span></span>
        | <i class="icon-calendar"></i> <span property="dateCreated">{{created_at_m}}</span>
        {{#last_modified_by}}
        | <i class="icon-user"></i> <span rel="contributor"><span typeOf="Person" about="/user/{{#contributor}}{{oid}}{{/contributor}}"><span property="name"><a href="/user/{{#contributor}}{{oid}}{{/contributor}}">{{last_modified_by}}</a></span></span></span>
        | <i class="icon-calendar"></i> <span property="dateModified">{{last_modified_at_m}}</span>
        {{/last_modified_by}}
        | <i class="icon-comment"></i> <a href="#">0 Comments</a>
        | <i class="icon-history"></i> Version <span property="version">{{version}}</span>
        {{/page}}
    </p>

</div>
    </div>
<!-- DIALOGS -->
<div class="modal hide" id="create-page-dialog">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">?</button>
        <h3>Create Page</h3>
    </div>
    <div class="modal-body">
        <form id="create-page-form" onsubmit="createPage(); return false;">
            <label>Create Page</label>
            <input type="text" class="span3" placeholder="Type the name…" id="page_name" name="page_name">
            <input type="hidden" id="parent" value="{{#page}}{{_id}}{{/page}}">
        </form>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn" data-dismiss="modal">Close</a>
        <a href="#" class="btn btn-primary" id="create-page-button">Create</a>
    </div>
</div>

<div class="modal hide" id="delete-page-dialog">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">X</button>
        <h3>Are you sure what to delete current page?</h3>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn" data-dismiss="modal">Close</a>
        <a href="#" class="btn btn-primary" id="delete-page-button">Delete</a>
    </div>
</div>

{{> footer}}

</body>
</html>